// Implementation file for parser generated by fsyacc
module internal PiReplParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "PiReplParser.fsy"

open System
open PiRepl


# 12 "PiReplParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | COMMAND_UNKNOWN of (string)
  | PI of (string)
  | COMMAND_QUIT
  | COMMAND_HELP
  | COMMAND_RUN
  | COMMAND_STEP
  | COMMAND_MULTI
  | COMMAND_LIST
  | COMMAND_RESET
  | END_OF_LINE
  | EOF
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_COMMAND_UNKNOWN
    | TOKEN_PI
    | TOKEN_COMMAND_QUIT
    | TOKEN_COMMAND_HELP
    | TOKEN_COMMAND_RUN
    | TOKEN_COMMAND_STEP
    | TOKEN_COMMAND_MULTI
    | TOKEN_COMMAND_LIST
    | TOKEN_COMMAND_RESET
    | TOKEN_END_OF_LINE
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_ReplLines
    | NONTERM_ReplLine
    | NONTERM_PiStatement
    | NONTERM_ReplCommand

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | COMMAND_UNKNOWN _ -> 0 
  | PI _ -> 1 
  | COMMAND_QUIT  -> 2 
  | COMMAND_HELP  -> 3 
  | COMMAND_RUN  -> 4 
  | COMMAND_STEP  -> 5 
  | COMMAND_MULTI  -> 6 
  | COMMAND_LIST  -> 7 
  | COMMAND_RESET  -> 8 
  | END_OF_LINE  -> 9 
  | EOF  -> 10 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_COMMAND_UNKNOWN 
  | 1 -> TOKEN_PI 
  | 2 -> TOKEN_COMMAND_QUIT 
  | 3 -> TOKEN_COMMAND_HELP 
  | 4 -> TOKEN_COMMAND_RUN 
  | 5 -> TOKEN_COMMAND_STEP 
  | 6 -> TOKEN_COMMAND_MULTI 
  | 7 -> TOKEN_COMMAND_LIST 
  | 8 -> TOKEN_COMMAND_RESET 
  | 9 -> TOKEN_END_OF_LINE 
  | 10 -> TOKEN_EOF 
  | 13 -> TOKEN_end_of_input
  | 11 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_ReplLines 
    | 3 -> NONTERM_ReplLines 
    | 4 -> NONTERM_ReplLine 
    | 5 -> NONTERM_ReplLine 
    | 6 -> NONTERM_ReplLine 
    | 7 -> NONTERM_PiStatement 
    | 8 -> NONTERM_ReplCommand 
    | 9 -> NONTERM_ReplCommand 
    | 10 -> NONTERM_ReplCommand 
    | 11 -> NONTERM_ReplCommand 
    | 12 -> NONTERM_ReplCommand 
    | 13 -> NONTERM_ReplCommand 
    | 14 -> NONTERM_ReplCommand 
    | 15 -> NONTERM_ReplCommand 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 13 
let _fsyacc_tagOfErrorTerminal = 11

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | COMMAND_UNKNOWN _ -> "COMMAND_UNKNOWN" 
  | PI _ -> "PI" 
  | COMMAND_QUIT  -> "COMMAND_QUIT" 
  | COMMAND_HELP  -> "COMMAND_HELP" 
  | COMMAND_RUN  -> "COMMAND_RUN" 
  | COMMAND_STEP  -> "COMMAND_STEP" 
  | COMMAND_MULTI  -> "COMMAND_MULTI" 
  | COMMAND_LIST  -> "COMMAND_LIST" 
  | COMMAND_RESET  -> "COMMAND_RESET" 
  | END_OF_LINE  -> "END_OF_LINE" 
  | EOF  -> "EOF" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | COMMAND_UNKNOWN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PI _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMAND_QUIT  -> (null : System.Object) 
  | COMMAND_HELP  -> (null : System.Object) 
  | COMMAND_RUN  -> (null : System.Object) 
  | COMMAND_STEP  -> (null : System.Object) 
  | COMMAND_MULTI  -> (null : System.Object) 
  | COMMAND_LIST  -> (null : System.Object) 
  | COMMAND_RESET  -> (null : System.Object) 
  | END_OF_LINE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 3us; 2us; 4us; 2us; 65535us; 0us; 5us; 2us; 5us; 2us; 65535us; 0us; 7us; 2us; 7us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 3us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; |]
let _fsyacc_action_rows = 19
let _fsyacc_actionTableElements = [|10us; 32768us; 0us; 18us; 1us; 10us; 2us; 11us; 3us; 12us; 4us; 14us; 5us; 15us; 6us; 13us; 7us; 16us; 8us; 17us; 9us; 9us; 0us; 49152us; 10us; 16385us; 0us; 18us; 1us; 10us; 2us; 11us; 3us; 12us; 4us; 14us; 5us; 15us; 6us; 13us; 7us; 16us; 8us; 17us; 9us; 9us; 0us; 16386us; 0us; 16387us; 1us; 32768us; 9us; 6us; 0us; 16388us; 1us; 32768us; 9us; 8us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 11us; 12us; 23us; 24us; 25us; 27us; 28us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16386us; 16387us; 65535us; 16388us; 65535us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; |]
let _fsyacc_reductions ()  =    [| 
# 147 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  obj option )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 156 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ReplLines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "PiReplParser.fsy"
                                        None 
                   )
# 27 "PiReplParser.fsy"
                 :  obj option ));
# 167 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ReplLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "PiReplParser.fsy"
                                       None 
                   )
# 30 "PiReplParser.fsy"
                 : 'ReplLines));
# 178 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ReplLines)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ReplLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "PiReplParser.fsy"
                                              None 
                   )
# 31 "PiReplParser.fsy"
                 : 'ReplLines));
# 190 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PiStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "PiReplParser.fsy"
                                                  None 
                   )
# 34 "PiReplParser.fsy"
                 : 'ReplLine));
# 201 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ReplCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "PiReplParser.fsy"
                                                  None 
                   )
# 35 "PiReplParser.fsy"
                 : 'ReplLine));
# 212 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "PiReplParser.fsy"
                                         None 
                   )
# 36 "PiReplParser.fsy"
                 : 'ReplLine));
# 222 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "PiReplParser.fsy"
                                  PiRepl.ExecutePi(_1); None 
                   )
# 39 "PiReplParser.fsy"
                 : 'PiStatement));
# 233 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "PiReplParser.fsy"
                                                    PiRepl.Quit(); None 
                   )
# 42 "PiReplParser.fsy"
                 : 'ReplCommand));
# 243 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "PiReplParser.fsy"
                                          PiRepl.Help(); None 
                   )
# 43 "PiReplParser.fsy"
                 : 'ReplCommand));
# 253 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "PiReplParser.fsy"
                                           PiRepl.ToggleMultiline(); None 
                   )
# 44 "PiReplParser.fsy"
                 : 'ReplCommand));
# 263 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "PiReplParser.fsy"
                                         PiRepl.RunMode(); None 
                   )
# 45 "PiReplParser.fsy"
                 : 'ReplCommand));
# 273 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "PiReplParser.fsy"
                                          PiRepl.StepMode(); None 
                   )
# 46 "PiReplParser.fsy"
                 : 'ReplCommand));
# 283 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "PiReplParser.fsy"
                                                    PiRepl.ListPending(); None
                   )
# 47 "PiReplParser.fsy"
                 : 'ReplCommand));
# 293 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "PiReplParser.fsy"
                                           PiRepl.Reset(); None 
                   )
# 48 "PiReplParser.fsy"
                 : 'ReplCommand));
# 303 "PiReplParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "PiReplParser.fsy"
                                                    PiRepl.CommandUnknown(_1); None 
                   )
# 49 "PiReplParser.fsy"
                 : 'ReplCommand));
|]
# 315 "PiReplParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 14;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  obj option  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
