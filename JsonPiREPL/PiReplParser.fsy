%{
open System
open PiRepl

%}

// The start token becomes a parser function in the compiled code:
%start start

// Regular tokens
%token END_OF_LINE EOF
%token COMMAND_QUIT 
       COMMAND_HELP
	   COMMAND_RUN
	   COMMAND_STEP
	   COMMAND_MULTI
	   COMMAND_LIST
	   COMMAND_RESET
%token <string> PI
%token <string> COMMAND_UNKNOWN

%type < obj option > start

%%

start: 
	| ReplLines					{ None }

ReplLines:
	| ReplLine					{ None }
	| ReplLines ReplLine		{ None }

ReplLine:
	| PiStatement END_OF_LINE	{ None }
	| ReplCommand END_OF_LINE	{ None }
	| END_OF_LINE				{ None }

PiStatement:
	| PI						{ PiRepl.ExecutePi($1); None }

ReplCommand:
	| COMMAND_QUIT              { PiRepl.Quit(); None } 
	| COMMAND_HELP				{ PiRepl.Help(); None }
	| COMMAND_MULTI				{ PiRepl.ToggleMultiline(); None }
	| COMMAND_RUN				{ PiRepl.RunMode(); None }
	| COMMAND_STEP				{ PiRepl.StepMode(); None }
	| COMMAND_LIST              { PiRepl.ListPending(); None}
	| COMMAND_RESET				{ PiRepl.Reset(); None }
	| COMMAND_UNKNOWN           { PiRepl.CommandUnknown($1); None }

