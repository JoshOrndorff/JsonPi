// Signature file for parser generated by fsyacc
module internal PiReplParser
type token = 
  | COMMAND_UNKNOWN of (string)
  | PI of (string)
  | COMMAND_QUIT
  | COMMAND_HELP
  | COMMAND_RUN
  | COMMAND_STEP
  | COMMAND_MULTI
  | COMMAND_LIST
  | COMMAND_RESET
  | END_OF_LINE
  | EOF
type tokenId = 
    | TOKEN_COMMAND_UNKNOWN
    | TOKEN_PI
    | TOKEN_COMMAND_QUIT
    | TOKEN_COMMAND_HELP
    | TOKEN_COMMAND_RUN
    | TOKEN_COMMAND_STEP
    | TOKEN_COMMAND_MULTI
    | TOKEN_COMMAND_LIST
    | TOKEN_COMMAND_RESET
    | TOKEN_END_OF_LINE
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_ReplLines
    | NONTERM_ReplLine
    | NONTERM_PiStatement
    | NONTERM_ReplCommand
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( obj option ) 
